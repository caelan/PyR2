/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-24 13:00:46.780974
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#include <stdio.h>
#include <stdlib.h>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#define IKFAST_API extern "C"

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( std::isnan(fy) ) {
        IKFAST_ASSERT(!std::isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( std::isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( std::isnan(fy) ) {
        IKFAST_ASSERT(!std::isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( std::isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }
IKFAST_API int getIKRealSize() { return sizeof(IKReal); }
IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fkLeft(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[4]);
x6=((x0)*(x1)*(x2));
x7=((x3)*(x4));
x8=((x6)+(((-1.00000000000000)*(x7))));
x9=IKcos(j[4]);
x10=IKcos(j[3]);
x11=((x2)*(x4));
x12=((x0)*(x1)*(x3));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=IKcos(j[1]);
x16=IKsin(j[3]);
x17=((x0)*(x15)*(x16));
x18=IKsin(j[6]);
x19=IKcos(j[5]);
x20=((x5)*(x8));
x21=((x10)*(x14));
x22=IKsin(j[5]);
x23=((-1.00000000000000)*(x14)*(x16));
x24=((-1.00000000000000)*(x0)*(x10)*(x15));
x25=((x24)+(x23));
x26=IKcos(j[6]);
x27=((x8)*(x9));
x28=((-1.00000000000000)*(x17));
x29=((x21)+(x28));
x30=((x29)*(x9));
x31=((x30)+(x20));
x32=((((-1.00000000000000)*(x17)))+(x21));
x33=((x0)*(x2));
x34=((x1)*(x7));
x35=((((-1.00000000000000)*(x34)))+(x33));
x36=((x0)*(x3));
x37=((x1)*(x11));
x38=((x37)+(x36));
x39=((x10)*(x35));
x40=((x38)*(x9));
x41=((x15)*(x16)*(x4));
x42=((((-1.00000000000000)*(x39)))+(x41));
x43=((x42)*(x5));
x44=((x43)+(x40));
x45=((-1.00000000000000)*(x41));
x46=((x39)+(x45));
x47=((x46)*(x9));
x48=((x38)*(x5));
x49=((x48)+(x47));
x50=((-1.00000000000000)*(x10)*(x15)*(x4));
x51=((-1.00000000000000)*(x16)*(x35));
x52=((x51)+(x50));
x53=((x1)*(x16));
x54=((x10)*(x15)*(x3));
x55=((x15)*(x2)*(x9));
x56=((x54)+(((-1.00000000000000)*(x53))));
x57=((x5)*(x56));
x58=((x55)+(x57));
x59=((x15)*(x16)*(x3));
x60=((x1)*(x10));
x61=((x59)+(x60));
x62=((x22)*(x61));
x63=((x53)+(((-1.00000000000000)*(x54))));
x64=((x63)*(x9));
x65=((x15)*(x2)*(x5));
x66=((x64)+(x65));
x67=((x19)*(x66));
x68=((x62)+(x67));
eerot[0]=((((x26)*(((((x19)*(((((x32)*(x9)))+(x20)))))+(((x22)*(x25)))))))+(((x18)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[1]=((((x18)*(((((-1.00000000000000)*(x22)*(x25)))+(((-1.00000000000000)*(x19)*(x31)))))))+(((x26)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[2]=((((x22)*(x31)))+(((x19)*(((((x0)*(x10)*(x15)))+(((x14)*(x16))))))));
eetrans[0]=((((x16)*(((((-0.321000000000000)*(x12)))+(((-0.321000000000000)*(x11)))))))+(((0.321000000000000)*(x0)*(x10)*(x15)))+(((0.400000000000000)*(x0)*(x15)))+(((x22)*(((((0.180000000000000)*(x20)))+(((0.180000000000000)*(x32)*(x9)))))))+(((x19)*(((((0.180000000000000)*(x0)*(x10)*(x15)))+(((0.180000000000000)*(x14)*(x16)))))))+(((0.100000000000000)*(x0))));
eerot[3]=((((x18)*(x44)))+(((x26)*(((((x19)*(x49)))+(((x22)*(x52))))))));
eerot[4]=((((x26)*(x44)))+(((x18)*(((((-1.00000000000000)*(x22)*(x52)))+(((-1.00000000000000)*(x19)*(x49))))))));
eerot[5]=((((x22)*(x49)))+(((x19)*(((((x16)*(x35)))+(((x10)*(x15)*(x4))))))));
eetrans[1]=((0.188000000000000)+(((x16)*(((((-0.321000000000000)*(x34)))+(((0.321000000000000)*(x33)))))))+(((x19)*(((((0.180000000000000)*(x10)*(x15)*(x4)))+(((0.180000000000000)*(x16)*(x35)))))))+(((0.400000000000000)*(x15)*(x4)))+(((0.100000000000000)*(x4)))+(((x22)*(((((0.180000000000000)*(x47)))+(((0.180000000000000)*(x48)))))))+(((0.321000000000000)*(x10)*(x15)*(x4))));
eerot[6]=((((x26)*(x68)))+(((x18)*(x58))));
eerot[7]=((((x26)*(x58)))+(((-1.00000000000000)*(x18)*(x68))));
eerot[8]=((((-1.00000000000000)*(x19)*(x61)))+(((x22)*(x66))));
eetrans[2]=((((x22)*(((((0.180000000000000)*(x65)))+(((0.180000000000000)*(x64)))))))+(((x19)*(((((-0.180000000000000)*(x60)))+(((-0.180000000000000)*(x59)))))))+(((-0.321000000000000)*(x59)))+(((-0.321000000000000)*(x60)))+(((-0.400000000000000)*(x1))));
}

class IKSolver {
public:
IKReal j15, cj15, sj15, htj15,
j16, cj16, sj16, htj16,
j18, cj18, sj18, htj18,
j19, cj19, sj19, htj19,
j20, cj20, sj20, htj20,
j21, cj21, sj21, htj21,
j17, cj17, sj17, htj17,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.188000000000000)+(py)+(((-0.180000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(sj17)*(sj17);
dummyeval[0]=((((-25.0000000000000)*(x0)*((pp)*(pp))))+(((-1.00000000000000)*(x0)*((px)*(px))))+(((0.0479123079750000)*(x0)))+(((-16.0000000000000)*((py)*(py))))+(((12.6520500000000)*(pp)*(x0)))+(((2.53041000000000)*(px)*(x0)))+(((-10.0000000000000)*(pp)*(px)*(x0))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKabs(py))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959))))))));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x1=(cj18)*(cj18);
IKReal x2=(pp)*(pp);
IKReal x3=(px)*(px);
IKReal x4=((12.6520500000000)*(pp));
IKReal x5=((10.0000000000000)*(pp)*(px));
IKReal x6=((1.64865600000000)*(x1));
IKReal x7=((2.53041000000000)*(px));
IKReal x8=((25.0000000000000)*(x2));
op[0]=((-1.60074369202500)+(x7)+(x6)+(x4)+(((-1.00000000000000)*(x3)))+(((-1.00000000000000)*(x8)))+(((-1.00000000000000)*(x5))));
op[1]=0;
op[2]=((-3.20148738405000)+(((-50.0000000000000)*(x2)))+(((3.29731200000000)*(x1)))+(((-4.59462400000000)*(x3)))+(((25.3041000000000)*(pp))));
op[3]=0;
op[4]=((-1.60074369202500)+(x6)+(x5)+(x4)+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(x3)))+(((-1.00000000000000)*(x8))));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( std::isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x9=((1.24610591900312)*(pz));
IKReal x10=((cj18)*(pz));
IKReal x11=((0.100000000000000)*(sj18));
IKReal x12=((x9)+(x11)+(x10));
IKReal x13=((cj15)*(px)*(sj18));
IKReal x14=((((-1.00000000000000)*(x13)))+(x12));
dummyeval[0]=x14;
dummyeval[1]=x14;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x15=(sj18)*(sj18);
IKReal x16=((0.644006250000000)*(x15));
IKReal x17=x1;
IKReal x18=((0.644006250000000)*(x17));
IKReal x19=((1.60500000000000)*(cj18));
IKReal x20=((1.00000000000000)+(x16)+(x19)+(x18));
dummyeval[0]=x20;
dummyeval[1]=x20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x21=((0.802500000000000)*(cj18));
IKReal x22=((1.00000000000000)+(x21));
IKReal x23=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x24=((10.0000000000000)*(cj15)*(px));
IKReal x25=((8.02500000000000)*(pz)*(sj18));
IKReal x26=((x24)+(x25)+(x23));
IKReal x27=((((-1.00000000000000)*(x26)))+(x22));
dummyeval[0]=x27;
dummyeval[1]=x27;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x28=((32.1000000000000)*(cj18));
IKReal x29=((40.0000000000000)+(x28));
IKReal x30=((321.000000000000)*(pz)*(sj18));
IKReal x31=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x32=((400.000000000000)*(cj15)*(px));
IKReal x33=((x32)+(x31)+(x30));
IKReal x34=((((-1.00000000000000)*(x33)))+(x29));
IKReal x35=((IKabs(x34) != 0)?((IKReal)1/(x34)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x35)*(((((103.041000000000)*(cj18)*(sj18)))+(((1000.00000000000)*(cj15)*(px)*(pz)))+(((128.400000000000)*(sj18)))+(((-100.000000000000)*(pz)))))), ((x35)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj18)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18))))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x121=x1;
IKReal x122=((103041.000000000)*(x121));
IKReal x123=((256800.000000000)*(cj18));
IKReal x124=(sj18)*(sj18);
IKReal x125=((103041.000000000)*(x124));
IKReal x126=((160000.000000000)+(x125)+(x122)+(x123));
IKReal x127=((IKabs(x126) != 0)?((IKReal)1/(x126)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x127)*(((((321000.000000000)*(cj18)*(pz)))+(((400000.000000000)*(pz)))+(((-32100.0000000000)*(sj18)))+(((321000.000000000)*(cj15)*(px)*(sj18)))))), ((-1.00000000000000)*(x127)*(((((((100000.000000000)+(((-1000000.00000000)*(cj15)*(px)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((pz)*(pz))))+(((103041.000000000)*((sj18)*(sj18))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((-128.400000000000)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
evalcond[0]=((IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(j17, 6.28318530717959)))))))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x128=(cj18)*(cj18);
IKReal x129=(pp)*(pp);
IKReal x130=(px)*(px);
IKReal x131=((12.6520500000000)*(pp));
IKReal x132=((10.0000000000000)*(pp)*(px));
IKReal x133=((1.64865600000000)*(x128));
IKReal x134=((2.53041000000000)*(px));
IKReal x135=((25.0000000000000)*(x129));
op[0]=((-1.60074369202500)+(x134)+(x131)+(x133)+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x130))));
op[1]=0;
op[2]=((-3.20148738405000)+(((-4.59462400000000)*(x130)))+(((25.3041000000000)*(pp)))+(((3.29731200000000)*(x128)))+(((-50.0000000000000)*(x129))));
op[3]=0;
op[4]=((-1.60074369202500)+(x131)+(x133)+(x132)+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x130))));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( std::isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x136=((0.100000000000000)*(sj18));
IKReal x137=((cj15)*(px)*(sj18));
IKReal x138=((1.24610591900312)*(pz));
IKReal x139=((cj18)*(pz));
IKReal x140=((x137)+(x139)+(x138));
IKReal x141=((((-1.00000000000000)*(x140)))+(x136));
dummyeval[0]=x141;
dummyeval[1]=x141;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x142=(sj18)*(sj18);
IKReal x143=((0.644006250000000)*(x142));
IKReal x144=x128;
IKReal x145=((0.644006250000000)*(x144));
IKReal x146=((1.60500000000000)*(cj18));
IKReal x147=((1.00000000000000)+(x143)+(x145)+(x146));
dummyeval[0]=x147;
dummyeval[1]=x147;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x148=((0.802500000000000)*(cj18));
IKReal x149=((8.02500000000000)*(pz)*(sj18));
IKReal x150=((1.00000000000000)+(x148)+(x149));
IKReal x151=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x152=((10.0000000000000)*(cj15)*(px));
IKReal x153=((x152)+(x151));
IKReal x154=((((-1.00000000000000)*(x153)))+(x150));
dummyeval[0]=x154;
dummyeval[1]=x154;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x155=((321.000000000000)*(pz)*(sj18));
IKReal x156=((32.1000000000000)*(cj18));
IKReal x157=((40.0000000000000)+(x156)+(x155));
IKReal x158=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x159=((400.000000000000)*(cj15)*(px));
IKReal x160=((x159)+(x158));
IKReal x161=((((-1.00000000000000)*(x160)))+(x157));
IKReal x162=((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x162)*(((((1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((-128.400000000000)*(sj18)))))), ((x162)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj18)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18))))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x163=x128;
IKReal x164=((103041.000000000)*(x163));
IKReal x165=((256800.000000000)*(cj18));
IKReal x166=(sj18)*(sj18);
IKReal x167=((103041.000000000)*(x166));
IKReal x168=((160000.000000000)+(x167)+(x164)+(x165));
IKReal x169=((IKabs(x168) != 0)?((IKReal)1/(x168)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x169)*(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))), ((x169)*(((((-1.00000000000000)*(((100000.000000000)+(((-1000000.00000000)*(cj15)*(px)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((100.000000000000)*(pz)))+(((-1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-128.400000000000)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x170=(sj17)*(sj17);
IKReal x171=(py)*(py);
IKReal x172=(px)*(px);
IKReal x173=(pp)*(pp);
IKReal x174=((417.429275384432)*(pp)*(py)*(x170));
IKReal x175=((1335.77368123018)*(px)*(py));
IKReal x176=((83.4858550768864)*(px)*(py)*(x170));
IKReal x177=((105.626721272552)*(py)*(x170));
IKReal x178=((208.714637692216)*(pp)*(px)*(x170));
IKReal x179=((264.066803181380)*(pp)*(x170));
IKReal x180=((521.786594230540)*(x170)*(x173));
IKReal x181=((333.943420307546)*(x171));
IKReal x182=((20.8714637692216)*(x170)*(x172));
IKReal x183=((52.8133606362761)*(px)*(x170));
op[0]=((((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(x179)+(x170)+(x183));
op[1]=((((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x175)))+(x174)+(x176));
op[2]=((((667.886840615091)*(x171)))+(((-83.4858550768864)*(x170)*(x171)))+(((2.00000000000000)*(x170)))+(((-1043.57318846108)*(x170)*(x173)))+(((528.133606362760)*(pp)*(x170)))+(((-1335.77368123018)*(x172)))+(((41.7429275384432)*(x170)*(x172))));
op[3]=((((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(x175)+(x174));
op[4]=((((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(x179)+(x178)+(x170));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x184=((20.0000000000000)*(cj15)*(px)*(sj17));
IKReal x185=((20.0000000000000)*(py)*(sj15)*(sj17));
IKReal x186=((x184)+(x185));
IKReal x187=(pz)*(pz);
IKReal x188=((100.000000000000)*(sj17)*(x187));
IKReal x189=(cj15)*(cj15);
IKReal x190=x172;
IKReal x191=((100.000000000000)*(sj17)*(x189)*(x190));
IKReal x192=x171;
IKReal x193=(sj15)*(sj15);
IKReal x194=((100.000000000000)*(sj17)*(x192)*(x193));
IKReal x195=((200.000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x196=((x191)+(x195)+(x194)+(x188)+(sj17));
IKReal x197=((((-1.00000000000000)*(x196)))+(x186));
dummyeval[0]=x197;
dummyeval[1]=x197;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x198=((px)*(sj15));
IKReal x199=((cj15)*(py));
IKReal x200=((((-1.00000000000000)*(x199)))+(x198));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x200;
evalcond[2]=x200;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( std::isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x201=((1.24610591900312)*(pz));
IKReal x202=((cj18)*(pz));
IKReal x203=((0.100000000000000)*(sj18));
IKReal x204=((x203)+(x202)+(x201));
IKReal x205=((cj15)*(px)*(sj18));
IKReal x206=((py)*(sj15)*(sj18));
IKReal x207=((x206)+(x205));
IKReal x208=((((-1.00000000000000)*(x207)))+(x204));
dummyeval[0]=x208;
dummyeval[1]=x208;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x209=(sj18)*(sj18);
IKReal x210=((0.644006250000000)*(x209));
IKReal x211=(cj18)*(cj18);
IKReal x212=((0.644006250000000)*(x211));
IKReal x213=((1.60500000000000)*(cj18));
IKReal x214=((1.00000000000000)+(x210)+(x212)+(x213));
dummyeval[0]=x214;
dummyeval[1]=x214;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x215=((0.802500000000000)*(cj18));
IKReal x216=((1.00000000000000)+(x215));
IKReal x217=((10.0000000000000)*(py)*(sj15));
IKReal x218=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x219=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x220=((10.0000000000000)*(cj15)*(px));
IKReal x221=((8.02500000000000)*(pz)*(sj18));
IKReal x222=((x217)+(x218)+(x219)+(x221)+(x220));
IKReal x223=((x216)+(((-1.00000000000000)*(x222))));
dummyeval[0]=x223;
dummyeval[1]=x223;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x224=((32.1000000000000)*(cj18));
IKReal x225=((40.0000000000000)+(x224));
IKReal x226=((321.000000000000)*(pz)*(sj18));
IKReal x227=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x228=((400.000000000000)*(cj15)*(px));
IKReal x229=((400.000000000000)*(py)*(sj15));
IKReal x230=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x231=((x229)+(x228)+(x227)+(x226)+(x230));
IKReal x232=((((-1.00000000000000)*(x231)))+(x225));
IKReal x233=((IKabs(x232) != 0)?((IKReal)1/(x232)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x233)*(((((1000.00000000000)*(py)*(pz)*(sj15)))+(((103.041000000000)*(cj18)*(sj18)))+(((1000.00000000000)*(cj15)*(px)*(pz)))+(((128.400000000000)*(sj18)))+(((-100.000000000000)*(pz)))))), ((x233)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj18)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18))))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x234=(cj18)*(cj18);
IKReal x235=((103041.000000000)*(x234));
IKReal x236=((256800.000000000)*(cj18));
IKReal x237=(sj18)*(sj18);
IKReal x238=((103041.000000000)*(x237));
IKReal x239=((160000.000000000)+(x238)+(x236)+(x235));
IKReal x240=((IKabs(x239) != 0)?((IKReal)1/(x239)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x240)*(((((321000.000000000)*(cj18)*(pz)))+(((321000.000000000)*(py)*(sj15)*(sj18)))+(((400000.000000000)*(pz)))+(((-32100.0000000000)*(sj18)))+(((321000.000000000)*(cj15)*(px)*(sj18)))))), ((-1.00000000000000)*(x240)*(((((321000.000000000)*(pz)*(sj18)))+(((((400000.000000000)+(((321000.000000000)*(cj18)))))*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((pz)*(pz))))+(((103041.000000000)*((sj18)*(sj18))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(py)*(pz)*(sj15)))+(((1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((-128.400000000000)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x241=((cj15)*(py));
IKReal x242=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x242)+(((-1.00000000000000)*(x241))));
evalcond[2]=((x241)+(((-1.00000000000000)*(x242))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( std::isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x243=((0.100000000000000)*(sj18));
IKReal x244=((cj15)*(px)*(sj18));
IKReal x245=((1.24610591900312)*(pz));
IKReal x246=((cj18)*(pz));
IKReal x247=((py)*(sj15)*(sj18));
IKReal x248=((x247)+(x246)+(x245)+(x244));
IKReal x249=((x243)+(((-1.00000000000000)*(x248))));
dummyeval[0]=x249;
dummyeval[1]=x249;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x250=(sj18)*(sj18);
IKReal x251=((0.644006250000000)*(x250));
IKReal x252=(cj18)*(cj18);
IKReal x253=((0.644006250000000)*(x252));
IKReal x254=((1.60500000000000)*(cj18));
IKReal x255=((1.00000000000000)+(x254)+(x251)+(x253));
dummyeval[0]=x255;
dummyeval[1]=x255;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x256=((0.802500000000000)*(cj18));
IKReal x257=((8.02500000000000)*(pz)*(sj18));
IKReal x258=((1.00000000000000)+(x256)+(x257));
IKReal x259=((10.0000000000000)*(py)*(sj15));
IKReal x260=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x261=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x262=((10.0000000000000)*(cj15)*(px));
IKReal x263=((x259)+(x261)+(x260)+(x262));
IKReal x264=((x258)+(((-1.00000000000000)*(x263))));
dummyeval[0]=x264;
dummyeval[1]=x264;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x265=((321.000000000000)*(pz)*(sj18));
IKReal x266=((32.1000000000000)*(cj18));
IKReal x267=((40.0000000000000)+(x265)+(x266));
IKReal x268=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x269=((400.000000000000)*(cj15)*(px));
IKReal x270=((400.000000000000)*(py)*(sj15));
IKReal x271=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x272=((x269)+(x268)+(x270)+(x271));
IKReal x273=((x267)+(((-1.00000000000000)*(x272))));
IKReal x274=((IKabs(x273) != 0)?((IKReal)1/(x273)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x274)*(((((1000.00000000000)*(py)*(pz)*(sj15)))+(((1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((-128.400000000000)*(sj18)))))), ((x274)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj18)))))*(((0.400000000000000)+(((0.321000000000000)*(cj18))))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x275=(cj18)*(cj18);
IKReal x276=((103041.000000000)*(x275));
IKReal x277=((256800.000000000)*(cj18));
IKReal x278=(sj18)*(sj18);
IKReal x279=((103041.000000000)*(x278));
IKReal x280=((160000.000000000)+(x276)+(x277)+(x279));
IKReal x281=((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x281)*(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))), ((x281)*(((((-1.00000000000000)*(((400000.000000000)+(((321000.000000000)*(cj18)))))*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((100.000000000000)*(pz)))+(((-1000.00000000000)*(cj15)*(px)*(pz)))+(((-103.041000000000)*(cj18)*(sj18)))+(((-1000.00000000000)*(py)*(pz)*(sj15)))+(((-128.400000000000)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x282=((0.0669590000000000)+(pp));
IKReal x283=((0.200000000000000)*(cj15)*(px));
IKReal x284=((0.200000000000000)*(py)*(sj15));
IKReal x285=((x284)+(x283));
IKReal x286=((x282)+(((-1.00000000000000)*(x285))));
IKReal x287=((0.800000000000000)*(cj15)*(px)*(sj17));
IKReal x288=((0.800000000000000)*(py)*(sj15)*(sj17));
IKReal x289=((x288)+(x287));
IKReal x290=((8.00000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x291=x171;
IKReal x292=(sj15)*(sj15);
IKReal x293=((4.00000000000000)*(sj17)*(x291)*(x292));
IKReal x294=(cj15)*(cj15);
IKReal x295=x172;
IKReal x296=((4.00000000000000)*(sj17)*(x294)*(x295));
IKReal x297=((0.0400000000000000)*(sj17));
IKReal x298=(pz)*(pz);
IKReal x299=((4.00000000000000)*(sj17)*(x298));
IKReal x300=((x299)+(x290)+(x293)+(x296)+(x297));
IKReal x301=((x289)+(((-1.00000000000000)*(x300))));
IKReal x302=((IKabs(x301) != 0)?((IKReal)1/(x301)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x302)*(((((((((-5.00000000000000)*(cj15)*(cj17)*(py)))+(((5.00000000000000)*(cj17)*(px)*(sj15)))))*(((0.0800000000000000)+(((-0.800000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(py)*(sj15)))))))+(((5.00000000000000)*(pz)*(sj17)*(x286)))))), ((x302)*(((((-4.00000000000000)*(pz)*(((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))))))+(((x286)*(((((-5.00000000000000)*(py)*(sj15)*(sj17)))+(((0.500000000000000)*(sj17)))+(((-5.00000000000000)*(cj15)*(px)*(sj17)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((-1.00000000000000)*(cj15)*(px)*(sj17)))+(((-1.00000000000000)*(py)*(sj15)*(sj17)))+(((0.100000000000000)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x303=((px)*(sj15));
IKReal x304=((cj15)*(py));
IKReal x305=((x303)+(((-1.00000000000000)*(x304))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x305;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x305;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x306=((cj15)*(py));
IKReal x307=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x307)+(((-1.00000000000000)*(x306))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x306)+(((-1.00000000000000)*(x307))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x308=((py)*(sj15));
IKReal x309=((cj15)*(px));
IKReal x310=((x308)+(x309));
IKReal x311=((0.100000000000000)+(((-1.00000000000000)*(x310))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=x311;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x308)))+(((0.200000000000000)*(x309)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x311;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x312=((py)*(sj15));
IKReal x313=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x312)))+(((0.200000000000000)*(x313)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x313)+(x312));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((cj15)*(px)*(sj17)))+(((-0.100000000000000)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((py)*(sj15)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x314=((px)*(sj15));
IKReal x315=((cj15)*(py));
IKReal x316=((x314)+(((-1.00000000000000)*(x315))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x316;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x316;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x317=((cj15)*(py));
IKReal x318=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x318)+(((-1.00000000000000)*(x317))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x317)+(((-1.00000000000000)*(x318))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x319=((py)*(sj15));
IKReal x320=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x319))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x320)))+(((0.200000000000000)*(x319)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x320)+(x319));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x321=((py)*(sj15));
IKReal x322=((cj15)*(px));
IKReal x323=((x321)+(x322));
IKReal x324=((0.100000000000000)+(((-1.00000000000000)*(x323))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=x324;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x322)))+(((0.200000000000000)*(x321)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x324;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((-1.00000000000000)*(cj16)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(sj16)))+(((-1.00000000000000)*(py)*(sj15)*(sj16)))+(((0.100000000000000)*(sj16))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((cj15)*(px)*(sj16)))+(((-0.100000000000000)*(sj16)))+(((py)*(sj15)*(sj16)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x325=((px)*(sj15));
IKReal x326=((cj15)*(py));
IKReal x327=((((-1.00000000000000)*(x326)))+(x325));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x327;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=x327;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(px)*(sj16)))+(((-3.11526479750779)*(cj16)*(pz)))+(((0.311526479750779)*(sj16)))+(((-3.11526479750779)*(py)*(sj15)*(sj16)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x328=((cj15)*(py));
IKReal x329=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x328)))+(x329));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=((((-1.00000000000000)*(x329)))+(x328));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x330=x328;
IKReal x331=x329;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((x331)+(((-1.00000000000000)*(x330))));
evalcond[2]=((-0.146959000000000)+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px))));
evalcond[3]=((x330)+(((-1.00000000000000)*(x331))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x332=x328;
IKReal x333=x329;
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((x333)+(((-1.00000000000000)*(x332))));
evalcond[2]=((0.0130410000000000)+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x332)+(((-1.00000000000000)*(x333))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(cj16)*(pz)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))), ((-0.00311526479750779)*(((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)))+(((400.000000000000)*(sj16)))+(((1000.00000000000)*(cj16)*(((((-1.00000000000000)*(cj16)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(sj16)))+(((-1.00000000000000)*(py)*(sj15)*(sj16)))+(((0.100000000000000)*(sj16)))))))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(cj16)*(px)*(sj16)))+(((1000.00000000000)*(pz)))+(((-1000.00000000000)*(pz)*((sj16)*(sj16))))+(((-100.000000000000)*(cj16)*(sj16)))+(((1000.00000000000)*(cj16)*(py)*(sj15)*(sj16)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-250.000000000000)*(cj15)*(px)*(sj16)))+(((1000.00000000000)*(pz)))+(((1250.00000000000)*(pp)*(sj16)))+(((83.6987500000000)*(sj16)))+(((-250.000000000000)*(py)*(sj15)*(sj16)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((-1250.00000000000)*(pp)*(sj16)))+(((250.000000000000)*(py)*(sj15)*(sj16)))+(((250.000000000000)*(cj15)*(px)*(sj16)))+(((-1000.00000000000)*(pz)))+(((-83.6987500000000)*(sj16)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x334=((2.49221183800623)*(cj18));
IKReal x335=(cj18)*(cj18);
IKReal x336=(cj17)*(cj17);
IKReal x337=(sj18)*(sj18);
IKReal x338=((x336)*(x337));
IKReal x339=((1.55277996137460)+(x338)+(x335)+(x334));
dummyeval[0]=x339;
dummyeval[1]=x339;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x340=((0.802500000000000)*(cj18));
IKReal x341=((1.00000000000000)+(x340));
IKReal x342=((10.0000000000000)*(py)*(sj15));
IKReal x343=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x344=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x345=((10.0000000000000)*(cj15)*(px));
IKReal x346=((8.02500000000000)*(cj17)*(pz)*(sj18));
IKReal x347=((x342)+(x343)+(x346)+(x344)+(x345));
IKReal x348=((x341)+(((-1.00000000000000)*(x347))));
dummyeval[0]=x348;
dummyeval[1]=x348;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x349=((10.0000000000000)*(cj15)*(cj17)*(px)*(sj18));
IKReal x350=((10.0000000000000)*(cj17)*(py)*(sj15)*(sj18));
IKReal x351=((x350)+(x349));
IKReal x352=((12.4610591900312)*(pz));
IKReal x353=((10.0000000000000)*(cj18)*(pz));
IKReal x354=((cj17)*(sj18));
IKReal x355=((x353)+(x352)+(x354));
IKReal x356=((((-1.00000000000000)*(x355)))+(x351));
dummyeval[0]=x356;
dummyeval[1]=x356;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x357=((py)*(sj15));
IKReal x358=((cj15)*(px));
IKReal x359=((x357)+(x358));
IKReal x360=((0.100000000000000)+(((-1.00000000000000)*(x359))));
IKReal x361=((0.321000000000000)*(cj18));
IKReal x362=((0.400000000000000)+(x361));
IKReal x363=((321.000000000000)*(cj17)*(sj18)*(x358));
IKReal x364=((321.000000000000)*(cj17)*(sj18)*(x357));
IKReal x365=((x363)+(x364));
IKReal x366=((32.1000000000000)*(cj17)*(sj18));
IKReal x367=((321.000000000000)*(cj18)*(pz));
IKReal x368=((400.000000000000)*(pz));
IKReal x369=((x368)+(x366)+(x367));
IKReal x370=((((-1.00000000000000)*(x369)))+(x365));
IKReal x371=((IKabs(x370) != 0)?((IKReal)1/(x370)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x371)*(((((-1000.00000000000)*((x360)*(x360))))+(((1000.00000000000)*((x362)*(x362))))))), ((x371)*(((((321.000000000000)*(cj17)*(sj18)*(x362)))+(((1000.00000000000)*(pz)*(x360)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x372=((0.321000000000000)*(cj18));
IKReal x373=((0.400000000000000)+(x372));
IKReal x374=((32.1000000000000)*(cj18));
IKReal x375=((40.0000000000000)+(x374));
IKReal x376=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x377=((400.000000000000)*(cj15)*(px));
IKReal x378=((400.000000000000)*(py)*(sj15));
IKReal x379=((321.000000000000)*(cj17)*(pz)*(sj18));
IKReal x380=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x381=((x380)+(x379)+(x378)+(x377)+(x376));
IKReal x382=((x375)+(((-1.00000000000000)*(x381))));
IKReal x383=((IKabs(x382) != 0)?((IKReal)1/(x382)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x383)*(((((321.000000000000)*(cj17)*(sj18)*(x373)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))))), ((x383)*(((((-1000.00000000000)*((x373)*(x373))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x384=(cj17)*(cj17);
IKReal x385=(sj18)*(sj18);
IKReal x386=((103041.000000000)*(x384)*(x385));
IKReal x387=(cj18)*(cj18);
IKReal x388=((103041.000000000)*(x387));
IKReal x389=((256800.000000000)*(cj18));
IKReal x390=((160000.000000000)+(x386)+(x388)+(x389));
IKReal x391=((IKabs(x390) != 0)?((IKReal)1/(x390)):(IKReal)1.0e30);
IKReal x392=((py)*(sj15));
IKReal x393=((cj15)*(px));
IKReal x394=((x393)+(x392));
IKReal x395=((0.100000000000000)+(((-1.00000000000000)*(x394))));
j16array[0]=IKatan2(((-1.00000000000000)*(x391)*(((((-321000.000000000)*(cj17)*(sj18)*(x395)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x391)*(((((x395)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(cj17)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x36=((cj16)*(sj18));
IKReal x37=((cj17)*(cj18)*(sj16));
IKReal x38=((x37)+(x36));
IKReal x39=((-1.00000000000000)*(x38));
IKReal x40=((sj16)*(sj18));
IKReal x41=((cj16)*(cj17)*(cj18));
IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
IKReal x43=((cj15)*(x39));
IKReal x44=((cj15)*(cj18)*(sj17));
IKReal x45=((sj15)*(x39));
IKReal x46=((x44)+(x45));
IKReal x47=((-1.00000000000000)*(cj18)*(sj15)*(sj17));
IKReal x48=((x47)+(x43));
IKReal x49=((cj15)*(sj16)*(sj17));
IKReal x50=((cj17)*(sj15));
IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
IKReal x52=((sj15)*(sj16)*(sj17));
IKReal x53=((cj15)*(cj17));
IKReal x54=((x53)+(x52));
IKReal x55=((cj16)*(cj18));
IKReal x56=((cj17)*(x40));
IKReal x57=((x55)+(((-1.00000000000000)*(x56))));
IKReal x58=((cj18)*(sj16));
IKReal x59=((cj17)*(x36));
IKReal x60=((x59)+(x58));
IKReal x61=((-1.00000000000000)*(x60));
IKReal x62=((cj15)*(x57));
IKReal x63=((sj15)*(sj17)*(sj18));
IKReal x64=((x62)+(((-1.00000000000000)*(x63))));
IKReal x65=((cj15)*(sj17)*(sj18));
IKReal x66=((sj15)*(x57));
IKReal x67=((x65)+(x66));
new_r00=((((r20)*(x42)))+(((r00)*(x48)))+(((r10)*(x46))));
new_r01=((((r01)*(((((-1.00000000000000)*(cj18)*(sj15)*(sj17)))+(x43)))))+(((r11)*(x46)))+(((r21)*(x42))));
new_r02=((((r22)*(x42)))+(((r02)*(x48)))+(((r12)*(x46))));
new_r10=((((cj16)*(r20)*(sj17)))+(((r10)*(x54)))+(((r00)*(x51))));
new_r11=((((r11)*(x54)))+(((cj16)*(r21)*(sj17)))+(((r01)*(x51))));
new_r12=((((r02)*(x51)))+(((cj16)*(r22)*(sj17)))+(((r12)*(x54))));
new_r20=((((r10)*(x67)))+(((r20)*(x61)))+(((r00)*(x64))));
new_r21=((((r11)*(x67)))+(((r01)*(x64)))+(((r21)*(x61))));
new_r22=((((r22)*(x61)))+(((r02)*(x64)))+(((r12)*(x67))));
{
IKReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
cj20array[0]=new_r22;
if( cj20array[0] >= -1.0001 && cj20array[0] <= 1.0001 )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( std::isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
if( j20valid[0] && j20valid[1] && IKabs(cj20array[0]-cj20array[1]) < 0.0001 && IKabs(sj20array[0]-sj20array[1]) < 0.0001 )
{
    j20valid[1]=false;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj20)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x68=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x68;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x68;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x69=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x69));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x69))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
{
    j19valid[1]=false;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x70=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x70));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x70))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
{
    j19valid[1]=false;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x71=((new_r10)*(new_r12)*(sj20));
IKReal x72=((new_r00)*(new_r02)*(sj20));
IKReal x73=((x72)+(x71));
IKReal x74=((-1.00000000000000)*(x73));
IKReal x75=((IKabs(x74) != 0)?((IKReal)1/(x74)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj20)*(new_r12)*(new_r20)*(x75)), ((cj20)*(new_r02)*(new_r20)*(x75)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x76=((cj19)*(new_r12));
IKReal x77=((new_r02)*(sj19));
IKReal x78=((((-1.00000000000000)*(x77)))+(x76));
IKReal x79=((-1.00000000000000)+(new_r22));
IKReal x80=((cj19)*(new_r02));
IKReal x81=((new_r12)*(sj19));
IKReal x82=((x80)+(x81));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x79;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x78;
evalcond[5]=x78;
evalcond[6]=x82;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x79;
evalcond[10]=x82;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x83=((cj19)*(new_r12));
IKReal x84=((new_r02)*(sj19));
IKReal x85=((x83)+(((-1.00000000000000)*(x84))));
IKReal x86=((cj19)*(new_r02));
IKReal x87=((new_r12)*(sj19));
IKReal x88=((x86)+(x87));
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x85;
evalcond[5]=x85;
evalcond[6]=x88;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x88));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x89=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x89)), ((-1.00000000000000)*(new_r20)*(x89)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x90=(new_r12)*(new_r12);
IKReal x91=(new_r02)*(new_r02);
IKReal x92=((x91)+(x90));
IKReal x93=((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x93)), ((new_r02)*(sj20)*(x93)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x94=((cj19)*(new_r12));
IKReal x95=((new_r02)*(sj19));
IKReal x96=((x94)+(((-1.00000000000000)*(x95))));
IKReal x97=((-1.00000000000000)+(new_r22));
IKReal x98=((cj19)*(new_r02));
IKReal x99=((new_r12)*(sj19));
IKReal x100=((x99)+(x98));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x97;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x96;
evalcond[5]=x96;
evalcond[6]=x100;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x97;
evalcond[10]=x100;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x101=((cj19)*(new_r12));
IKReal x102=((new_r02)*(sj19));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
IKReal x104=((cj19)*(new_r02));
IKReal x105=((new_r12)*(sj19));
IKReal x106=((x104)+(x105));
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x103;
evalcond[5]=x103;
evalcond[6]=x106;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x106));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x107=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x107)), ((-1.00000000000000)*(new_r20)*(x107)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x108=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x108)), ((-1.00000000000000)*(new_r20)*(x108)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x109=((new_r02)*(new_r11));
IKReal x110=((new_r01)*(new_r12));
IKReal x111=((((-1.00000000000000)*(x110)))+(x109));
IKReal x112=((IKabs(x111) != 0)?((IKReal)1/(x111)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj21)*(new_r12)*(x112)), ((cj21)*(new_r02)*(x112)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x113=((new_r02)*(new_r10));
IKReal x114=((new_r00)*(new_r12));
IKReal x115=((((-1.00000000000000)*(x114)))+(x113));
IKReal x116=((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj21)*(x116)), ((new_r02)*(sj21)*(x116)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x117=(new_r12)*(new_r12);
IKReal x118=(new_r02)*(new_r02);
IKReal x119=((x117)+(x118));
IKReal x120=((IKabs(x119) != 0)?((IKReal)1/(x119)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x120)), ((new_r02)*(sj20)*(x120)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API int ikLeft(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, const int max_sol, IKReal* solutions)
{IKSolver solver;
  std::vector<IKSolution> vsolutions;
  bool bSuccess = solver.ik(eetrans, eerot, &pfree[0], vsolutions);
    if( !bSuccess ) {
      // fprintf(stderr,"Failed to get ik solution with free = %f\n", pfree[0]);
      return 0;
    }

    int id = 0;
    // printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size() && i < max_sol; ++i) {
      // printf("sol%d (free=%f): ", (int)i, pfree[0]);
      vsolutions[i].GetSolution(&sol[0], &pfree[0]);
      // printf("Solution: ");
      for( size_t j = 0; j < sol.size(); ++j) {
	// printf("%f ", (float)sol[j]);
	solutions[id++] = (float)sol[j];
      }
      // printf("\n");
    }
    return (int)vsolutions.size();
}

